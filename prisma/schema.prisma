// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking[]
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Car {
  id          String   @id @default(uuid())
  name        String
  brand       String
  type        String
  model       String
  year        Int
  color       String
  transmission String
  fuelType    String
  seats       Int
  pricePerDay Decimal
  availability Boolean  @default(true)
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking[]
}

model Driver {
  id            String   @id @default(uuid())
  name          String
  nationality   String
  licenseNumber String   @unique
  age           Int
  languages     String[]
  pricePerDay   Decimal
  pricePerWeek  Decimal?
  pricePerMonth Decimal?
  photo         String?
  availability  Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Booking {
  id          String   @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Decimal
  status      BookingStatus @default(PENDING)
  userId      String
  carId       String
  user        User     @relation(fields: [userId], references: [id])
  car         Car      @relation(fields: [carId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
